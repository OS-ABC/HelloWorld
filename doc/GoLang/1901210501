# Leetcode 169.求众数

 定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在众数。

 示例 1:

输入: [3,2,3]

输出: 3

 示例 2:

输入: [2,2,1,1,1,2,2]

输出: 2

**解：**

```
func majorityElement(nums []int) int {
    var ret int
    var majorityMap map[int]int
    majorityMap = make(map[int]int)
    
    len1 := len(nums)
    for i := 0; i < len1; i++{
        num := nums[i]
        majorityMap[num]++
        if majorityMap[num] > len1/2 {
            ret = num
            break
        }
    }
    return ret
}
```





# Leetcode 100.相同的树



给定两个二叉树，编写一个函数来检验它们是否相同。

如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

示例 1:

输入:       1         1
               / \       / \
             2  3     2  3

```
    [1,2,3],   [1,2,3]
```

输出: true

示例 2:

输入:          1          1
              /            \
             2             2

```
    [1,2],     [1,null,2]
```

输出: false

示例 3:

输入:           1         1
               / \       / \
             2   1     1   2

```
    [1,2,1],   [1,1,2]
```

输出: false

**解：**

```
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isSameTree(p *TreeNode, q *TreeNode) bool {
    if nil == p && nil == q {
        return true
    } else if nil == p {
        return false
    } else if nil == q {
        return false
    }

    if p.Val != q.Val {
        return false
    }
    
    if false == isSameTree(p.Left, q.Left) {
        return false
    }
    if false == isSameTree(p.Right, q.Right) {
        return false
    }

    return true
}
```





